class Solution {
    public String findOrder(String[] words) {
        // code here
       // firstly comparing the words and finding the graph
       List<List<Integer>>list= new ArrayList<>();
       int n=words.length;
       Set<Character> uniqueChars = new HashSet<>();
        for (String word : words) {
        for (char c : word.toCharArray()) {
        uniqueChars.add(c);
        }
    }
    
    // maping character to indexes
    int index=0;
    Map<Character, Integer> ci = new HashMap<>();
    Map<Integer, Character> ic = new HashMap<>();
    for(char c: uniqueChars)
    {
     ci.put(c,index);
     ic.put(index,c);
     index++;
    }
    int l= uniqueChars.size();
    for(int i=0;i<l;i++)
    {
        list.add(new ArrayList<>());
    }

       for(int i=0; i<n-1; i++)
       {
           int l1= words[i].length();
           int l2= words[i+1].length();
           boolean d=false;
           String w1= words[i];
           String w2= words[i+1];
           for(int j=0; j<Math.min(l1,l2); j++)
           {
               char c1= w1.charAt(j);
               char c2= w2.charAt(j);
               if(c1!=c2)
               {
                   list.get(ci.get(c1)).add(ci.get(c2));
                   d=true;
                   break;
               }
           }
           if(!d && w1.length()>w2.length()) return "";
       }
       int [] indegree= new int[l];
       for(int i=0;i<l;i++)
       {
           for(int node: list.get(i))
           {
               indegree[node]++;
           }
       }
       Queue<Integer> qu = new LinkedList<>();
       for(int i=0; i<l; i++)
       {
           if(indegree[i]==0)
           {
               qu.offer(i);
           }
       }
       List<Integer> li= new ArrayList<>();
       while(!qu.isEmpty())
       {
           int node =qu.peek();
           qu.remove();
           li.add(node);
           for(int no: list.get(node))
           {
               indegree[no]--;
               if(indegree[no]==0)
               {
                   qu.offer(no);
               }
           }
       }
       if(li.size()!=l) return "";
       String s="";
       for(int i: li)
       {
           
           s=s+""+ic.get(i);
       }
       
       return s;
    }
}
